"""
Environment for creating aligned observations.

Aligned observations have one observation that is randomized and one that has
been generated by the default parameters, this means the center of the uniform
distribution specified for the variables.

This was added for Artemij.

TODO(artemij): Please read this:

This code provides the aligned observation function as class and wrapper.

The other things we changed were:
1) light direction in envs/camera.py#L173
2) the tables size in tasks/block/models/tables/table_green.urdf#L15
3) turn off randomize block color, as required for new bullet versions + EGL
    in file tasks/acgd_tasks/task.py#L112 comment change red and blue color
"""

from copy import copy
import numpy as np
import cv2
from gym import Wrapper
from gym_grasping.envs.robot_sim_env import RobotSimEnv


def unwrap(env):
    """return the innermost environment"""
    out_env = env
    while hasattr(out_env, 'env'):
        out_env = out_env.env
    return out_env


class AlignedObservationEnv(RobotSimEnv):
    """
    An environment that gives aligned observations.
    """

    def render(self, mode='rgb_array'):
        """
        render is gym compatibility, but done by camera
        """
        info2 = self._info.copy()
        rgb = self.camera.render(mode=mode, info=self._info)

        # cache state: randomization, object colors
        env_params_sample_cache = copy(self.params.sample)
        env_params_sample_cache2 = copy(self.params._sample)

        # change to default
        self.params.step(randomize=False)

        self._task._change_object_colors()

        # redo render
        rgb_default = self.camera.render(mode=mode, info=info2)

        # restore cached state
        self.params.sample = env_params_sample_cache
        self.params._sample = env_params_sample_cache2

        self._task._change_object_colors()

        # output data
        self._info["rgb_default"] = rgb_default
        return rgb


class AlignedObservationWrapper(Wrapper):
    """
    A wrapper that gives aliged overvations
    """

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        unwrap(self.env).render = self.render
        self.uself = unwrap(self.env)

    def render(self, mode='rgb_array'):
        """
        render is gym compatibility, but done by camera
        """
        info2 = self.uself._info.copy()
        rgb = self.uself.camera.render(mode=mode, info=self.uself._info)

        # cache state: randomization, object colors
        env_params_sample_cache = copy(self.uself.params.sample)
        env_params_sample_cache2 = copy(self.uself.params._sample)

        # change to default
        self.uself.params.step(randomize=False)

        self.uself._task._change_object_colors()

        # redo render
        rgb_default = self.uself.camera.render(mode=mode, info=info2)

        # restore cached state
        self.uself.params.sample = env_params_sample_cache
        self.uself.params._sample = env_params_sample_cache2

        self.uself._task._change_object_colors()

        # output data
        self.uself._info["rgb_default"] = rgb_default
        return rgb


def test_aligned_env():
    '''tese the curriculum env'''
    # env = RobotSimEnv(task='stack', renderer='egl',
    #                       act_type='continuous', initial_pose='close',
    #                       max_steps=1e3, obs_type='image')
    # env = AlignedObservationWrapper(env)

    env = AlignedObservationEnv(task='stack', renderer='egl',
                                act_type='continuous', initial_pose='close',
                                max_steps=1e3, obs_type='image')

    while 1:
        for _ in range(20):
            action = [0, 0, 0, 0, 1]
            obs, _, done, info = env.step(action)

            # render
            img = obs[:, :, ::-1]
            img2 = info["rgb_default"][:, :, ::-1]
            img_cmb = np.concatenate((img, img2), axis=1)
            img = cv2.resize(img_cmb, (600, 300))
            cv2.imshow("win", img)
            cv2.waitKey(1)

            # from time import sleep
            # sleep(.15)

            if done:
                env.reset()

        env.reset()


if __name__ == "__main__":
    test_aligned_env()
