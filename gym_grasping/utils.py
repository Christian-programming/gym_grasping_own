"""
Timing decorator, for performance testing
"""
import os
import time
import glob
import json
from types import SimpleNamespace
from operator import itemgetter
import numpy as np
from scipy.spatial.transform import Rotation as R


#
# Transformations
def state2matrix(state):
    """
    helper function to return matrix form of bullet object state.

    Args:
        state: position, orientation(quat) as returned by getLinkState or
               getBasePositionAndOrientation
    Returns:
        matrix: 4x4 transformation matrix
    """
    position, orientation = state[:2]
    assert len(position), len(orientation) == (3, 4)
    matrix = np.eye(4)
    matrix[:3, :3] = R.from_quat(orientation).as_matrix()
    matrix[:3, 3] = position
    return matrix


#
#
def timeit(method):
    '''decorator to time function execution'''
    def timed(*args, **kw):
        t_s = time.time()
        result = method(*args, **kw)
        t_e = time.time()

        if 'log_time' in kw:
            name = kw.get('log_name', method.__name__.upper())
            kw['log_time'][name] = int((t_e - t_s) * 1000)
        else:
            print('%r  %2.2f ms' %
                  (method.__name__, (t_e - t_s) * 1000))
        return result

    return timed


#
# Module argument management
def check_args_serializable(args):
    try:
        return bool(json.dumps(vars(args)))
    except TypeError:
        print(vars(args))
        return False


def save_args(args, filename):
    if os.path.isfile(filename):
        print("Args file already exits", filename)
        raise ValueError

    with open(filename, "w") as outfile:
        json.dump(vars(args), outfile)


def load_args(filename):
    """
    Loads module arguments from file. Files can be generated by
    overload_default_args(save=True)

    Args:
        filename of arg file.

    Returns:
        Args object used by module

    """
    with open(filename) as infile:
        arg_vars = json.load(infile)
    args = SimpleNamespace(**arg_vars)
    return args


#
# Lint
def lint_sort(lint_scores):
    '''pretty print sorted lint scores'''
    num_files = 100
    res = dict(sorted(lint_scores.items(), key=itemgetter(1))[:num_files])
    for filename, score in res.items():
        print(filename.ljust(40), round(score, 2))


def lint():
    from pylint.lint import Run
    '''compute lint scores'''
    lint_score = {}
    files = sorted(glob.glob("*/*.py"))
    for filename in files:
        results = Run([filename,
                       '--disable=no-member,c-extension-no-member,import-error'
                       ],
                      do_exit=False)
        try:
            score = results.linter.stats['global_note']
        except KeyError:
            continue
        lint_score[filename] = score

    for filename, score in lint_score.items():
        print(filename.ljust(40), score)
    return lint_score


def main():
    '''compute and cache scores'''
    if os.path.isfile('.lint_scores.json'):
        with open('.lint_scores.json') as infile:
            lint_scores = json.load(infile)
        lint_sort(lint_scores)

    else:
        lint_scores = lint()
        with open('.lint_scores.json', 'w') as outfile:
            json.dump(lint_scores, outfile)


if __name__ == "__main__":
    main()
